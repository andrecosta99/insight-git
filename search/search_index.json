{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Insight Git","text":"<p>Insight Git is a powerful tool designed to analyze Git repositories, offering comprehensive statistics on commit activities, contributors, and much more. This tool makes it easier to get an overview of development progress and to delve into the details of commit history.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Detailed Commit Analysis: Explore commit logs for insights and statistics.</li> <li>Contributor Statistics: See the distribution of contributions across team members.</li> <li>Plugin Integration: Enhance functionalities with plugins for additional metrics.</li> <li>Intuitive Web Interface: Navigate your Git statistics via a user-friendly dashboard built with Dash.</li> </ul>"},{"location":"#why-use-insight-git","title":"Why Use Insight Git?","text":"<p>Insight Git equips project managers, developers, and analysts with the insights needed to deeply understand development trends and contributions. It's the perfect tool for streamlining the development process, identifying bottlenecks, or simply getting a snapshot of your project's health.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install Insight Git, simply run: <code>pip install insight-git</code></p> <p>This command fetches the latest version of Insight Git from PyPI and installs it on your system.</p>"},{"location":"#launching-insight-git","title":"Launching Insight Git","text":"<p>After installation, you can launch Insight Git's Dash application to start analyzing Git repositories:</p> <p>To start, run: <code>python -m insight-git</code></p> <p>This command starts a local web server. Open your web browser and navigate to http://127.0.0.1:8050/ to access the Insight Git dashboard.</p> <p>For more detailed information on development and contributing to Insight Git, please refer to the developers documentation in the <code>dev.md</code> file.</p>"},{"location":"api/","title":"Available Functions and Documentation","text":"<p>This page provides an overview of all the available functions and their documentation in our project.</p>"},{"location":"api/#contributors-plugin","title":"Contributors Plugin","text":"<p>Documents functions related to extracting and displaying contributor information from a Git repository.</p>"},{"location":"api/#insight_git.plugins.contributors_info.display_contributors_info","title":"<code>display_contributors_info(repo_path)</code>","text":"<p>Generates a Dash layout component showing the contributors and their commit counts.</p> <p>Parameters:</p> Name Type Description Default <code>repo_path</code> <p>The file system path to the git repository.</p> required <p>Returns:</p> Type Description <p>A Dash HTML component with the list of contributors or an error message.</p> Source code in <code>insight_git/plugins/contributors_info.py</code> <pre><code>def display_contributors_info(repo_path):\n    \"\"\"\n    Generates a Dash layout component showing the contributors and their commit counts.\n\n    Args:\n        repo_path: The file system path to the git repository.\n\n    Returns:\n        A Dash HTML component with the list of contributors or an error message.\n    \"\"\"\n    contributors_data = extract_contributors(repo_path)\n    if \"error\" in contributors_data:\n        return dbc.Alert(f\"Error: {contributors_data['error']}\", color=\"danger\")\n\n    layout = html.Div(\n        [\n            dcc.Store(id=\"contributors-store\", data=contributors_data),\n            dcc.Store(\n                id=\"updated-contributors-store\"\n            ),  # Store to keep the updated contributors' data\n            html.H5(\"Contributors\", className=\"mb-3\"),\n            dbc.ListGroup(\n                id=\"contributors-list\",\n                children=[\n                    dbc.ListGroupItem(f\"{contributor}: {count}\")\n                    for contributor, count in contributors_data.items()\n                ],\n                className=\"mb-4\",\n            ),\n            dbc.Row(\n                [\n                    dbc.Col(\n                        dbc.Input(\n                            id=\"original-name\", placeholder=\"Original Name or Username\"\n                        ),\n                        width=4,\n                    ),\n                    dbc.Col(\n                        dbc.Input(id=\"unified-name\", placeholder=\"Unified Name\"),\n                        width=4,\n                    ),\n                    dbc.Col(\n                        dbc.Button(\n                            \"Unify\", id=\"unify-btn\", color=\"success\", className=\"me-1\"\n                        ),\n                        width=4,\n                    ),\n                ]\n            ),\n        ],\n        style={\"maxWidth\": \"720px\", \"margin\": \"0 auto\"},\n    )\n\n    return layout\n</code></pre>"},{"location":"api/#insight_git.plugins.contributors_info.display_updated_contributors","title":"<code>display_updated_contributors(updated_data)</code>","text":"<p>Updates the displayed list of contributors based on the updated data.</p> <p>Parameters:</p> Name Type Description Default <code>updated_data</code> <p>The updated contributors' data from the updated-contributors-store.</p> required <p>Returns:</p> Type Description <p>A list of Dash components representing the updated contributors.</p> Source code in <code>insight_git/plugins/contributors_info.py</code> <pre><code>@callback(\n    Output(\"contributors-list\", \"children\"),\n    [Input(\"updated-contributors-store\", \"data\")],\n)\ndef display_updated_contributors(updated_data):\n    \"\"\"\n    Updates the displayed list of contributors based on the updated data.\n\n    Args:\n        updated_data: The updated contributors' data from the updated-contributors-store.\n\n    Returns:\n        A list of Dash components representing the updated contributors.\n    \"\"\"\n    if updated_data is None:\n        raise PreventUpdate\n\n    updated_contributors = [\n        dbc.ListGroupItem(f\"{contributor}: {count}\")\n        for contributor, count in updated_data.items()\n    ]\n    return updated_contributors\n</code></pre>"},{"location":"api/#insight_git.plugins.contributors_info.extract_contributors","title":"<code>extract_contributors(repo_path)</code>","text":"<p>Extracts the contributors and their commit counts from a git repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_path</code> <p>The file system path to the git repository.</p> required <p>Returns:</p> Type Description <p>A Counter object with contributors' names as keys and their commit counts as values.</p> <p>If an error occurs, returns a dict with an 'error' key and the error message.</p> Source code in <code>insight_git/plugins/contributors_info.py</code> <pre><code>def extract_contributors(repo_path):\n    \"\"\"\n    Extracts the contributors and their commit counts from a git repository.\n\n    Args:\n        repo_path: The file system path to the git repository.\n\n    Returns:\n        A Counter object with contributors' names as keys and their commit counts as values.\n        If an error occurs, returns a dict with an 'error' key and the error message.\n    \"\"\"\n    try:\n        repo = Repo(repo_path)\n        commits = list(repo.iter_commits())\n        contributors = Counter(commit.author.name for commit in commits)\n        return contributors\n    except Exception as e:\n        return {\"error\": str(e)}\n</code></pre>"},{"location":"api/#insight_git.plugins.contributors_info.update_contributors_data","title":"<code>update_contributors_data(n_clicks, initial_data, updated_data, original_name, unified_name)</code>","text":"<p>Updates the contributors' data by unifying names based on user input.</p> <p>Parameters:</p> Name Type Description Default <code>n_clicks</code> <p>Number of times the unify button has been clicked.</p> required <code>initial_data</code> <p>The initial data from the contributors-store.</p> required <code>updated_data</code> <p>The potentially updated data from the updated-contributors-store.</p> required <code>original_name</code> <p>The original name to be replaced.</p> required <code>unified_name</code> <p>The new name that replaces the original.</p> required <p>Returns:</p> Type Description <p>The updated contributors' data.</p> Source code in <code>insight_git/plugins/contributors_info.py</code> <pre><code>@callback(\n    Output(\"updated-contributors-store\", \"data\"),\n    Input(\"unify-btn\", \"n_clicks\"),\n    [\n        State(\"contributors-store\", \"data\"),\n        State(\"updated-contributors-store\", \"data\"),\n        State(\"original-name\", \"value\"),\n        State(\"unified-name\", \"value\"),\n    ],\n    prevent_initial_call=True,\n)\ndef update_contributors_data(\n    n_clicks, initial_data, updated_data, original_name, unified_name\n):\n    \"\"\"\n    Updates the contributors' data by unifying names based on user input.\n\n    Args:\n        n_clicks: Number of times the unify button has been clicked.\n        initial_data: The initial data from the contributors-store.\n        updated_data: The potentially updated data from the updated-contributors-store.\n        original_name: The original name to be replaced.\n        unified_name: The new name that replaces the original.\n\n    Returns:\n        The updated contributors' data.\n    \"\"\"\n    if not original_name or not unified_name:\n        raise PreventUpdate\n\n    contributors_data = updated_data if updated_data is not None else initial_data\n\n    if original_name in contributors_data:\n        contributors_data[unified_name] = contributors_data.get(\n            unified_name, 0\n        ) + contributors_data.pop(original_name, 0)\n\n    return contributors_data\n</code></pre>"},{"location":"api/#git-statistics","title":"Git Statistics","text":"<p>Details the functionalities for gathering and displaying various statistics from a Git repository.</p>"},{"location":"api/#insight_git.plugins.git_statistics.extract_git_stats","title":"<code>extract_git_stats(repo_path)</code>","text":"<p>Extracts comprehensive Git statistics from a repository's commit history.</p> <p>This function collects data on the number of commits, commit dates, total lines added and deleted across all commits, and computes the average lines changed per commit. It provides a broad view of the repository's activity and work volume.</p> <p>Parameters:</p> Name Type Description Default <code>repo_path</code> <code>str</code> <p>The file system path to the local Git repository.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing statistics about the repository including the total number of commits,   a list of commit dates, and the average lines changed per commit.   If an error occurs, returns a dictionary with an 'error' key containing the error message.</p> Source code in <code>insight_git/plugins/git_statistics.py</code> <pre><code>def extract_git_stats(repo_path):\n    \"\"\"\n    Extracts comprehensive Git statistics from a repository's commit history.\n\n    This function collects data on the number of commits, commit dates, total lines added and deleted across all commits,\n    and computes the average lines changed per commit. It provides a broad view of the repository's activity and work volume.\n\n    Args:\n        repo_path (str): The file system path to the local Git repository.\n\n    Returns:\n        dict: A dictionary containing statistics about the repository including the total number of commits,\n              a list of commit dates, and the average lines changed per commit.\n              If an error occurs, returns a dictionary with an 'error' key containing the error message.\n    \"\"\"\n\n    try:\n        repo = Repo(repo_path)\n        commits = list(repo.iter_commits())\n\n        # Collect commit dates\n        commit_dates = [commit.committed_datetime for commit in commits]\n\n        # Calculate total lines added and deleted\n        total_lines_added = sum(commit.stats.total[\"insertions\"] for commit in commits)\n        total_lines_deleted = sum(commit.stats.total[\"deletions\"] for commit in commits)\n\n        # Compute average lines changed per commit\n        average_lines_per_commit = (\n            ((total_lines_added + total_lines_deleted) / len(commits)) if commits else 0\n        )\n\n        return {\n            \"total_commits\": len(commits),\n            \"commit_dates\": commit_dates,\n            \"average_lines_per_commit\": average_lines_per_commit,\n        }\n\n    except Exception as e:\n        logging.error(f\"Error extracting git statistics: {e}\")\n        return {\"error\": str(e)}\n</code></pre>"},{"location":"api/#commit-graph","title":"Commit Graph","text":"<p>Describes how to generate and display graphical representations of commit histories.</p>"},{"location":"api/#insight_git.plugins.commit_graph.display_commit_graph","title":"<code>display_commit_graph(repo_path)</code>","text":"<p>Generates and displays a graph of commit activity over time for a Git repository using Dash and Plotly.</p> <p>This function first extracts commit dates and then uses Pandas to organize these dates into a DataFrame for easy plotting with Plotly. The resulting graph shows the number of commits per day.</p> <p>Parameters:</p> Name Type Description Default <code>repo_path</code> <code>str</code> <p>The file system path to the local Git repository.</p> required <p>Returns:</p> Type Description <p>dash.dcc.Graph: A Dash graph component that visually represents commit activity over time.</p> <p>If an error occurs in extracting commit dates, this function raises PreventUpdate to stop the Dash app from updating.</p> <p>Raises:</p> Type Description <code>PreventUpdate</code> <p>If there is an error in extracting commit dates, indicating that the graph cannot be displayed.</p> Source code in <code>insight_git/plugins/commit_graph.py</code> <pre><code>def display_commit_graph(repo_path):\n    \"\"\"\n    Generates and displays a graph of commit activity over time for a Git repository using Dash and Plotly.\n\n    This function first extracts commit dates and then uses Pandas to organize these dates into a DataFrame\n    for easy plotting with Plotly. The resulting graph shows the number of commits per day.\n\n    Args:\n        repo_path (str): The file system path to the local Git repository.\n\n    Returns:\n        dash.dcc.Graph: A Dash graph component that visually represents commit activity over time.\n        If an error occurs in extracting commit dates, this function raises PreventUpdate to stop the Dash app from updating.\n\n    Raises:\n        PreventUpdate: If there is an error in extracting commit dates, indicating that the graph cannot be displayed.\n    \"\"\"\n\n    commit_dates = extract_commit_dates(repo_path)\n    if \"error\" in commit_dates:\n        raise PreventUpdate\n    df = pd.DataFrame(\n        {\n            \"Commit Date\": pd.to_datetime(commit_dates, utc=True),\n            \"Commit Count\": 1,\n        }\n    )\n    df[\"Commit Date\"] = df[\"Commit Date\"].dt.tz_convert(None)\n    df[\"Commit Date\"] = df[\"Commit Date\"].dt.date\n\n    df_group = df.groupby(\"Commit Date\").count().reset_index()\n\n    fig = go.Figure(\n        data=[\n            go.Scatter(\n                x=df_group[\"Commit Date\"],\n                y=df_group[\"Commit Count\"],\n                mode=\"lines+markers\",\n            )\n        ]\n    )\n    fig.update_layout(\n        title=\"Commit Activity Over Time\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Number of Commits\",\n    )\n\n    return dcc.Graph(figure=fig)\n</code></pre>"},{"location":"api/#insight_git.plugins.commit_graph.extract_commit_dates","title":"<code>extract_commit_dates(repo_path)</code>","text":"<p>Extracts commit dates from a local Git repository to analyze commit activity over time.</p> <p>This function iterates over all commits in the specified repository, collecting the datetime for each commit.</p> <p>Parameters:</p> Name Type Description Default <code>repo_path</code> <code>str</code> <p>The file system path to the local Git repository.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of datetime objects representing the commit dates.</p> <p>Returns a dictionary with an 'error' key if an exception occurs.</p> Source code in <code>insight_git/plugins/commit_graph.py</code> <pre><code>def extract_commit_dates(repo_path):\n    \"\"\"\n    Extracts commit dates from a local Git repository to analyze commit activity over time.\n\n    This function iterates over all commits in the specified repository, collecting the datetime for each commit.\n\n    Args:\n        repo_path (str): The file system path to the local Git repository.\n\n    Returns:\n        list: A list of datetime objects representing the commit dates.\n        Returns a dictionary with an 'error' key if an exception occurs.\n    \"\"\"\n\n    try:\n        repo = Repo(repo_path)\n        commits = list(repo.iter_commits())\n        commit_dates = [commit.committed_datetime for commit in commits]\n        return commit_dates\n    except Exception as e:\n        return {\"error\": str(e)}\n</code></pre>"},{"location":"api/#commit-type","title":"Commit Type","text":"<p>Explains the methods used to categorize and display commit types based on commit messages.</p>"},{"location":"api/#insight_git.plugins.commit_type.categorize_commit_type","title":"<code>categorize_commit_type(commit_message)</code>","text":"<p>Categorizes a commit message into predefined types such as Bug Fix, Feature, Documentation, or Other.</p> <p>This function analyzes the commit message for keywords that indicate its type.</p> <p>Parameters:</p> Name Type Description Default <code>commit_message</code> <code>str</code> <p>The commit message to categorize.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The category of the commit based on its message.</p> Source code in <code>insight_git/plugins/commit_type.py</code> <pre><code>def categorize_commit_type(commit_message):\n    \"\"\"\n    Categorizes a commit message into predefined types such as Bug Fix, Feature, Documentation, or Other.\n\n    This function analyzes the commit message for keywords that indicate its type.\n\n    Args:\n        commit_message (str): The commit message to categorize.\n\n    Returns:\n        str: The category of the commit based on its message.\n    \"\"\"\n\n    commit_message = commit_message.lower()\n    if \"fix\" in commit_message or \"bug\" in commit_message:\n        return \"Bug Fix\"\n    elif \"feature\" in commit_message or \"add\" in commit_message:\n        return \"Feature\"\n    elif \"doc\" in commit_message or \"readme\" in commit_message:\n        return \"Documentation\"\n    else:\n        return \"Other\"\n</code></pre>"},{"location":"api/#insight_git.plugins.commit_type.extract_commit_types","title":"<code>extract_commit_types(repo_path)</code>","text":"<p>Extracts and counts the types of commits in a local Git repository based on commit messages.</p> <p>This function iterates over all commits in the specified repository, categorizing each commit according to predefined types (e.g., Bug Fix, Feature, Documentation) based on its message.</p> <p>Parameters:</p> Name Type Description Default <code>repo_path</code> <code>str</code> <p>The file system path to the local Git repository.</p> required <p>Returns:</p> Type Description <p>collections.Counter: A Counter object mapping commit types to their frequencies.</p> <p>Returns a dictionary with an 'error' key if an exception occurs.</p> Source code in <code>insight_git/plugins/commit_type.py</code> <pre><code>def extract_commit_types(repo_path):\n    \"\"\"\n    Extracts and counts the types of commits in a local Git repository based on commit messages.\n\n    This function iterates over all commits in the specified repository, categorizing each commit\n    according to predefined types (e.g., Bug Fix, Feature, Documentation) based on its message.\n\n    Args:\n        repo_path (str): The file system path to the local Git repository.\n\n    Returns:\n        collections.Counter: A Counter object mapping commit types to their frequencies.\n        Returns a dictionary with an 'error' key if an exception occurs.\n    \"\"\"\n\n    try:\n        repo = Repo(repo_path)\n        commits = list(repo.iter_commits())\n        commit_types = Counter(\n            categorize_commit_type(commit.message) for commit in commits\n        )\n        return commit_types\n    except Exception as e:\n        return {\"error\": str(e)}\n</code></pre>"},{"location":"dev/","title":"For Developers","text":"<p>If you are interested in contributing to the Insight Git project or wish to add new features, please follow the steps below to set up your development environment.</p>"},{"location":"dev/#installing-for-development","title":"Installing for Development","text":"<p>To set up your development environment for Insight Git, execute the following commands. This will install all necessary development dependencies, including new tools and libraries introduced for handling data visualization and Git repository analysis.</p> <p>git clone https://github.com/andrecosta99/insight-git cd ct-final python -m venv env</p>"},{"location":"dev/#on-unix-or-macos","title":"On Unix or MacOS","text":"<p>source env/bin/activate</p>"},{"location":"dev/#on-windows","title":"On Windows","text":"<p>.\\env\\Scripts\\activate pip install -e . pre-commit install</p> <p>Ensure all dependencies are up to date by reviewing the <code>requirements.txt</code> file or any other dependency management file used by the project.</p>"},{"location":"dev/#running-tests","title":"Running Tests","text":"<p>Insight Git includes a suite of tests to ensure the quality and functionality of the code. To run these tests, use the following command:</p> <p>pytest</p> <p>To generate a coverage report and see which parts of your code are covered by tests, use:</p> <p>pytest --cov=insight-git --cov-report=html</p> <p>This will create a coverage report in the <code>htmlcov</code> directory, which you can open with a web browser.</p>"},{"location":"dev/#contributing-guidelines","title":"Contributing Guidelines","text":"<p>For documentation changes or additions, ensure you are familiar with MkDocs and follow the project's standards for documentation structure and formatting.</p>"}]}